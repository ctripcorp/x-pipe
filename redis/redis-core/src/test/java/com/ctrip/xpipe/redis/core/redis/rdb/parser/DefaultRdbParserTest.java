package com.ctrip.xpipe.redis.core.redis.rdb.parser;

import com.ctrip.xpipe.AbstractTest;
import com.ctrip.xpipe.redis.core.redis.operation.RedisOp;
import com.ctrip.xpipe.redis.core.redis.rdb.RdbParseListener;
import com.ctrip.xpipe.redis.core.redis.rdb.RdbParser;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

/**
 * @author lishanglin
 * date 2022/6/5
 */
public class DefaultRdbParserTest extends AbstractTest implements RdbParseListener {

    private DefaultRdbParser parser;

    private DefaultRdbParseContext context;

    private List<RedisOp> redisOps;

    // only kv data
    private byte[] rdbBytes = new byte[] {0x52, 0x45, 0x44, 0x49, 0x53, 0x30, 0x30, 0x30, 0x39, (byte)0xfa, 0x09, 0x72,
            0x65, 0x64, 0x69, 0x73, 0x2d, 0x76, 0x65, 0x72, 0x05, 0x36, 0x2e, 0x32, 0x2e, 0x36, (byte)0xfa, 0x0a, 0x72,
            0x65, 0x64, 0x69, 0x73, 0x2d, 0x62, 0x69, 0x74, 0x73, (byte)0xc0, 0x40, (byte)0xfa, 0x05, 0x63, 0x74, 0x69,
            0x6d, 0x65, (byte)0xc2, (byte)0xeb, (byte)0xe9, (byte)0x9a, 0x62, (byte)0xfa, 0x08, 0x75, 0x73, 0x65, 0x64,
            0x2d, 0x6d, 0x65, 0x6d, (byte)0xc2, 0x70, 0x56, 0x07, 0x00, (byte)0xfa, 0x04, 0x67, 0x74, 0x69, 0x64, 0x40,
            (byte)0x84, 0x63, 0x63, 0x64, 0x37, 0x38, 0x65, 0x64, 0x30, 0x38, 0x39, 0x38, 0x36, 0x65, 0x38, 0x38, 0x34,
            0x33, 0x62, 0x38, 0x37, 0x32, 0x30, 0x33, 0x61, 0x37, 0x32, 0x38, 0x62, 0x32, 0x30, 0x35, 0x64, 0x34, 0x35,
            0x37, 0x33, 0x34, 0x34, 0x34, 0x62, 0x3a, 0x31, 0x2d, 0x33, 0x2c, 0x62, 0x62, 0x30, 0x64, 0x39, 0x62, 0x65,
            0x37, 0x38, 0x31, 0x36, 0x61, 0x64, 0x66, 0x65, 0x39, 0x66, 0x61, 0x32, 0x39, 0x64, 0x30, 0x37, 0x34, 0x37,
            0x62, 0x30, 0x30, 0x32, 0x34, 0x62, 0x32, 0x61, 0x33, 0x34, 0x30, 0x30, 0x62, 0x39, 0x38, 0x3a, 0x31, 0x2c,
            0x30, 0x62, 0x62, 0x62, 0x35, 0x32, 0x61, 0x61, 0x30, 0x36, 0x36, 0x66, 0x65, 0x62, 0x35, 0x61, 0x65, 0x36,
            0x62, 0x62, 0x34, 0x65, 0x33, 0x30, 0x62, 0x64, 0x35, 0x36, 0x61, 0x61, 0x34, 0x66, 0x38, 0x61, 0x32, 0x30,
            0x31, 0x36, 0x61, 0x63, 0x3a, 0x31, 0x2d, 0x34, (byte)0xfa, 0x0c, 0x61, 0x6f, 0x66, 0x2d, 0x70, 0x72, 0x65,
            0x61, 0x6d, 0x62, 0x6c, 0x65, (byte)0xc0, 0x00, (byte)0xfe, 0x00, (byte)0xfb, 0x04, 0x00, 0x00, 0x02, 0x6b,
            0x34, (byte)0xc0, 0x64, 0x00, 0x02, 0x6b, 0x32, 0x02, 0x76, 0x32, 0x00, 0x02, 0x6b, 0x31, 0x02, 0x76, 0x31,
            0x00, 0x02, 0x6b, 0x33, (byte)0xc3, 0x09, 0x3a, 0x01, 0x61, 0x61, (byte)0xe0, 0x2d, 0x00, 0x01, 0x61, 0x61,
            (byte)0xff, 0x24, (byte)0xd3, 0x3b, 0x00, 0x30, (byte)0xed, (byte)0xa5, 0x14, 0x0a};

    @Before
    public void setupDefaultRdbParserTest() {
        context = new DefaultRdbParseContext();
        parser = new DefaultRdbParser(context);
        parser.registerListener(this);
        parser.needFinishNotify(true);
        redisOps = new ArrayList<>();
    }

    @Test
    public void testParser() {
        ByteBuf byteBuf = Unpooled.wrappedBuffer(rdbBytes);
        while (!parser.isFinish()) {
            parser.read(byteBuf);
        }

        Assert.assertEquals("ccd78ed08986e8843b87203a728b205d4573444b:1-3," +
                "bb0d9be7816adfe9fa29d0747b0024b2a3400b98:1," +
                "0bbb52aa066feb5ae6bb4e30bd56aa4f8a2016ac:1-4", context.getAux("gtid"));
        Assert.assertEquals(0, context.getDbId());
        Assert.assertEquals(5, redisOps.size());
        Assert.assertEquals("SELECT 0", redisOps.get(0).toString());
        Assert.assertEquals("SET k4 100", redisOps.get(1).toString());
        Assert.assertEquals("SET k2 v2", redisOps.get(2).toString());
        Assert.assertEquals("SET k1 v1", redisOps.get(3).toString());
        Assert.assertEquals("SET k3 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", redisOps.get(4).toString());
    }

    @Override
    public void onRedisOp(RedisOp redisOp) {
        logger.info("[onRedisOp] {}", redisOp);
        redisOps.add(redisOp);
    }

    @Override
    public void onAux(String key, String value) {
        logger.info("[onAux] {} {}", key, value);
    }

    @Override
    public void onFinish(RdbParser<?> parser) {
        logger.info("[onFinish] {}", parser);
    }
}
